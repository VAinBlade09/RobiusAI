/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => ROBIUSAIPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  apiKey: "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",
  model: "gpt-3.5-turbo"
};
var ROBIUSAIPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "analyze-current-note",
      name: "Анализировать заметку с помощью ROBIUS AI",
      editorCallback: async (editor, view) => {
        new NotePickerModal(this.app, (notes) => {
          new PromptModal(this.app, async (result) => {
            const prompt = typeof result === 'object' && result !== null ? result.prompt : result;
            try {
              // Формируем текст для анализа
              const notesText = notes.map(n => `# ${n.name}\n${n.content}`).join('\n\n');
              const userContent = `Инструкция пользователя: ${prompt}\n\nСодержимое заметок:\n${notesText}`;
              const response = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${this.settings.apiKey}`
                },
                body: JSON.stringify({
                  model: this.settings.model,
                  messages: [
                    {
                      role: "system",
                      content: "Ты — полезный помощник, анализирующий заметки Obsidian. Дай советы и предложения на основе содержимого и инструкции пользователя."
                    },
                    {
                      role: "user",
                      content: userContent
                    }
                  ]
                })
              });
              if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
              }
              const data = await response.json();
              if (!data.choices || !data.choices[0] || !data.choices[0].message) {
                throw new Error("OpenAI API вернул неожиданный ответ: " + JSON.stringify(data));
              }
              const analysis = data.choices[0].message.content || "Нет анализа";
              new AnalysisModal(this.app, analysis).open();
            } catch (error) {
              new import_obsidian.Notice("Ошибка при анализе заметки: " + error.message);
            }
          }).open();
        }).open();
      }
    });
    this.addCommand({
      id: "generate-response",
      name: "Сгенерировать ответ ROBIUS AI",
      editorCallback: async (editor, view) => {
        const showPrompt = () => {
          new PromptModal(this.app, async (result) => {
            const prompt = typeof result === 'object' && result !== null ? result.prompt : result;
            try {
              const response = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${this.settings.apiKey}`
                },
                body: JSON.stringify({
                  model: this.settings.model,
                  messages: [
                    {
                      role: "system",
                      content: "Ты — полезный помощник, который генерирует ответы на основе предоставленного контекста."
                    },
                    {
                      role: "user",
                      content: prompt
                    }
                  ]
                })
              });
              if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
              }
              const data = await response.json();
              if (!data.choices || !data.choices[0] || !data.choices[0].message) {
                throw new Error("OpenAI API вернул неожиданный ответ: " + JSON.stringify(data));
              }
              const generatedText = data.choices[0].message.content || "Нет ответа";
              new GenerateResponseModal(this.app, generatedText, (text) => {
                editor.replaceSelection(text);
              }, {
                noStyle: true,
                onRedo: showPrompt
              }).open();
            } catch (error) {
              new import_obsidian.Notice("Ошибка при генерации ответа: " + error.message);
            }
          }).open();
        };
        showPrompt();
      }
    });
    this.addCommand({
      id: "edit-selection-with-robus-ai",
      name: "Изменить выделенный текст с помощью ROBIUS AI",
      editorCallback: async (editor, view) => {
        const selectedText = editor.getSelection();
        if (!selectedText) {
          new import_obsidian.Notice("Сначала выделите текст для изменения.");
          return;
        }
        new PromptModal(this.app, async ({ prompt, useSelection }) => {
          try {
            let userContent;
            if (useSelection) {
              userContent = `Инструкция пользователя: ${prompt}\n\nТекст для изменения:\n${selectedText}`;
            } else {
              userContent = `Инструкция пользователя: ${prompt}`;
            }
            const response = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${this.settings.apiKey}`
              },
              body: JSON.stringify({
                model: this.settings.model,
                messages: [
                  {
                    role: "system",
                    content: "Ты — полезный помощник, который редактирует выделенный пользователем текст в Obsidian. Четко следуй инструкции пользователя."
                  },
                  {
                    role: "user",
                    content: userContent
                  }
                ]
              })
            });
            if (!response.ok) {
              const errorText = await response.text();
              throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            const data = await response.json();
            if (!data.choices || !data.choices[0] || !data.choices[0].message) {
              throw new Error("OpenAI API вернул неожиданный ответ: " + JSON.stringify(data));
            }
            const editedText = data.choices[0].message.content || "Нет ответа";
            editor.replaceSelection(editedText);
          } catch (error) {
            new import_obsidian.Notice("Ошибка при изменении текста: " + error.message);
          }
        }, { showUseSelectionCheckbox: true }).open();
      }
    });
    this.addSettingTab(new ROBIUSAISettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AnalysisModal = class extends import_obsidian.Modal {
  constructor(app, analysis) {
    super(app);
    this.analysis = analysis;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    // Заголовок
    const title = contentEl.createEl("div", { text: "Результаты анализа:" });
    title.style.marginBottom = "1em";
    title.style.fontWeight = "bold";
    title.style.fontSize = "1.1em";
    // Анализ
    const analysisDiv = contentEl.createEl("div");
    analysisDiv.style.background = "#232323";
    analysisDiv.style.color = "#eee";
    analysisDiv.style.borderRadius = "6px";
    analysisDiv.style.padding = "16px";
    analysisDiv.style.marginBottom = "1em";
    analysisDiv.style.whiteSpace = "pre-wrap";
    analysisDiv.style.fontSize = "1em";
    analysisDiv.style.border = "1px solid #444";
    analysisDiv.textContent = this.analysis;
    // Кнопки
    const buttonContainer = contentEl.createEl("div");
    buttonContainer.style.textAlign = "center";
    buttonContainer.style.marginTop = "1em";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "center";
    buttonContainer.style.gap = "16px";
    const buttonStyle = {
      width: "180px",
      padding: "8px 0",
      fontSize: "1em",
      borderRadius: "6px",
      border: "none",
      cursor: "pointer"
    };
    // Кнопка копировать
    const copyBtn = buttonContainer.createEl("button", { text: "Копировать текст" });
    Object.assign(copyBtn.style, buttonStyle, {
      background: "#7be87b",
      color: "#222"
    });
    copyBtn.addEventListener("click", async () => {
      await navigator.clipboard.writeText(this.analysis);
      new import_obsidian.Notice("Текст скопирован в буфер обмена");
    });
    // Кнопка создать заметку
    const newNoteBtn = buttonContainer.createEl("button", { text: "Создать заметку" });
    Object.assign(newNoteBtn.style, buttonStyle, {
      background: "#7be87b",
      color: "#222"
    });
    newNoteBtn.addEventListener("click", async () => {
      const modal = new import_obsidian.Modal(this.app);
      modal.onOpen = () => {
        const { contentEl } = modal;
        contentEl.empty();
        const title = contentEl.createEl("div", { text: "Введите название новой заметки:" });
        title.style.marginBottom = "1em";
        title.style.fontWeight = "bold";
        title.style.fontSize = "1.1em";
        const input = contentEl.createEl("input");
        input.type = "text";
        input.style.width = "100%";
        input.style.marginBottom = "1.5em";
        input.style.padding = "8px";
        input.style.fontSize = "1em";
        input.placeholder = "Название заметки";
        input.value = `ROBIUS AI-анализ ${new Date().toLocaleString().replace(/[:,]/g, '-').replace(/\s+/g, '_')}`;
        input.focus();
        const btnContainer = contentEl.createEl("div");
        btnContainer.style.textAlign = "center";
        const createBtn = btnContainer.createEl("button", { text: "Создать" });
        createBtn.style.marginTop = "1em";
        createBtn.style.padding = "8px 24px";
        createBtn.style.fontSize = "1em";
        createBtn.style.borderRadius = "6px";
        createBtn.style.background = "#7be87b";
        createBtn.style.color = "#222";
        createBtn.style.border = "none";
        createBtn.style.cursor = "pointer";
        createBtn.addEventListener("click", async () => {
          let fileName = input.value.trim();
          if (!fileName.endsWith('.md')) fileName += '.md';
          await this.app.vault.create(fileName, this.analysis);
          new import_obsidian.Notice(`Создана новая заметка: ${fileName}`);
          modal.close();
          this.close();
        });
      };
      modal.open();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var PromptModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit, options = {}) {
    super(app);
    this.onSubmit = onSubmit;
    this.options = options;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    // Заголовок
    const title = contentEl.createEl("div", { text: "Введите ваш запрос для ROBIUS AI:" });
    title.style.marginBottom = "1em";
    title.style.fontWeight = "bold";
    title.style.fontSize = "1.1em";
    // Поле ввода
    const input = contentEl.createEl("textarea");
    input.style.width = "100%";
    input.style.height = "80px";
    input.style.background = "#232323";
    input.style.color = "#eee";
    input.style.border = "1px solid #444";
    input.style.borderRadius = "6px";
    input.style.padding = "8px";
    input.style.fontSize = "1em";
    input.style.marginBottom = "1.5em";
    input.placeholder = "Например: Перепиши текст более официально, переведи на английский и т.д.";
    input.focus();
    // Чекбокс: использовать выделенный текст
    let useSelection = true;
    if (this.options.showUseSelectionCheckbox) {
      const checkboxContainer = contentEl.createEl("div");
      checkboxContainer.style.display = "flex";
      checkboxContainer.style.alignItems = "center";
      checkboxContainer.style.marginBottom = "1em";
      const checkbox = checkboxContainer.createEl("input", { type: "checkbox" });
      checkbox.checked = true;
      checkbox.style.marginRight = "8px";
      const label = checkboxContainer.createEl("label", { text: "Использовать выделенный текст как основу" });
      label.style.color = "#eee";
      checkbox.addEventListener("change", () => {
        useSelection = checkbox.checked;
      });
    }
    // Кнопка
    const btnContainer = contentEl.createEl("div");
    btnContainer.style.textAlign = "center";
    const button = btnContainer.createEl("button", { text: "Сгенерировать" });
    button.style.marginTop = "1em";
    button.style.padding = "8px 24px";
    button.style.fontSize = "1em";
    button.style.borderRadius = "6px";
    button.style.background = "#7be87b";
    button.style.color = "#222";
    button.style.border = "none";
    button.style.cursor = "pointer";
    button.addEventListener("click", () => {
      this.onSubmit({ prompt: input.value, useSelection });
      this.close();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var GenerateResponseModal = class extends import_obsidian.Modal {
  constructor(app, generatedText, onConfirm, options = {}) {
    super(app);
    this.generatedText = generatedText;
    this.onConfirm = onConfirm;
    this.options = options;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    // Заголовок
    const title = contentEl.createEl("div", { text: "Сгенерированный текст:" });
    title.style.marginBottom = "1em";
    title.style.fontWeight = "bold";
    title.style.fontSize = "1.1em";
    // Выделяем область вокруг текста
    const textDiv = contentEl.createEl("div");
    const safeText = escapeHtml(this.generatedText);
    if (this.options.noStyle) {
      textDiv.textContent = this.generatedText;
      textDiv.style.whiteSpace = "pre-wrap";
      textDiv.style.marginBottom = "1.5em";
      textDiv.style.fontSize = "1em";
    } else {
      textDiv.innerHTML = `<div style=\"\n      background: #d4ffd4;\n      color: #222;\n      border-radius: 6px;\n      padding: 16px;\n      margin-bottom: 1.5em;\n      display: block;\n      white-space: pre-wrap;\n      border: 1px solid #7be87b;\n      font-size: 1em;\n    \">${safeText}</div>`;
    }
    // Кнопки
    const buttonContainer = contentEl.createEl("div");
    buttonContainer.style.textAlign = "center";
    buttonContainer.style.marginTop = "1em";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "center";
    buttonContainer.style.gap = "16px";

    const buttonStyle = {
      width: "220px",
      padding: "8px 0",
      fontSize: "1em",
      borderRadius: "6px",
      border: "none",
      cursor: "pointer"
    };

    const confirmBtn = buttonContainer.createEl("button", { text: "Вставить текст" });
    Object.assign(confirmBtn.style, buttonStyle, {
      background: "#7be87b",
      color: "#222"
    });
    confirmBtn.addEventListener("click", () => {
      this.onConfirm(this.generatedText);
      this.close();
    });
    // Новая кнопка: использовать как новую заметку
    const newNoteBtn = buttonContainer.createEl("button", { text: "В новую заметку" });
    Object.assign(newNoteBtn.style, buttonStyle, {
      background: "#7be87b",
      color: "#222"
    });
    newNoteBtn.addEventListener("click", async () => {
      // Модалка для ввода названия
      const modal = new import_obsidian.Modal(this.app);
      modal.onOpen = () => {
        const { contentEl } = modal;
        contentEl.empty();
        const title = contentEl.createEl("div", { text: "Введите название новой заметки:" });
        title.style.marginBottom = "1em";
        title.style.fontWeight = "bold";
        title.style.fontSize = "1.1em";
        const input = contentEl.createEl("input");
        input.type = "text";
        input.style.width = "100%";
        input.style.marginBottom = "1.5em";
        input.style.padding = "8px";
        input.style.fontSize = "1em";
        input.placeholder = "Название заметки";
        input.value = `ROBIUS AI-заметка ${new Date().toLocaleString().replace(/[:,]/g, '-').replace(/\s+/g, '_')}`;
        input.focus();
        const btnContainer = contentEl.createEl("div");
        btnContainer.style.textAlign = "center";
        const createBtn = btnContainer.createEl("button", { text: "Создать" });
        createBtn.style.marginTop = "1em";
        createBtn.style.padding = "8px 24px";
        createBtn.style.fontSize = "1em";
        createBtn.style.borderRadius = "6px";
        createBtn.style.background = "#7be87b";
        createBtn.style.color = "#222";
        createBtn.style.border = "none";
        createBtn.style.cursor = "pointer";
        createBtn.addEventListener("click", async () => {
          let fileName = input.value.trim();
          if (!fileName.endsWith('.md')) fileName += '.md';
          await this.app.vault.create(fileName, this.generatedText);
          new import_obsidian.Notice(`Создана новая заметка: ${fileName}`);
          modal.close();
          this.close();
        });
      };
      modal.open();
    });
    const redoBtn = buttonContainer.createEl("button", { text: "Переделать" });
    Object.assign(redoBtn.style, buttonStyle, {
      background: "#444",
      color: "#eee"
    });
    redoBtn.addEventListener("click", () => {
      this.close();
      if (this.options.onRedo) {
        this.options.onRedo();
      }
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
var ROBIUSAISettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("OpenAI API ключ").setDesc("Введите ваш OpenAI API ключ").addText((text) => text.setPlaceholder("Введите ваш API ключ").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Модель").setDesc("Выберите модель ROBIUS AI для использования").addText((text) => text.setPlaceholder("gpt-3.5-turbo").setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

function escapeHtml(text) {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

var NotePickerModal = class extends import_obsidian.Modal {
  constructor(app, onSelect) {
    super(app);
    this.onSelect = onSelect;
    this.selectedFiles = new Set();
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    // Заголовок
    const title = contentEl.createEl("div", { text: "Выберите заметки для анализа:" });
    title.style.marginBottom = "1em";
    title.style.fontWeight = "bold";
    title.style.fontSize = "1.1em";
    // Список чекбоксов
    const list = contentEl.createEl("div");
    list.style.maxHeight = "250px";
    list.style.overflowY = "auto";
    list.style.marginBottom = "1.5em";
    list.style.border = "1px solid #444";
    list.style.borderRadius = "6px";
    list.style.padding = "8px 0";
    list.style.background = "#232323";
    // Стили для чекбоксов и лейблов
    const files = this.app.vault.getMarkdownFiles();
    files.forEach(file => {
      const label = list.createEl("label");
      label.style.display = "flex";
      label.style.alignItems = "center";
      label.style.padding = "6px 16px";
      label.style.cursor = "pointer";
      label.style.transition = "background 0.2s";
      label.addEventListener("mouseenter", () => label.style.background = "#333");
      label.addEventListener("mouseleave", () => label.style.background = "");
      const checkbox = label.createEl("input", { type: "checkbox" });
      checkbox.style.marginRight = "10px";
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          this.selectedFiles.add(file);
        } else {
          this.selectedFiles.delete(file);
        }
        nextBtn.disabled = this.selectedFiles.size === 0;
      });
      const nameSpan = label.createEl("span", { text: file.basename });
      nameSpan.style.fontSize = "1em";
      nameSpan.style.color = "#eee";
    });
    // Кнопка
    const btnContainer = contentEl.createEl("div");
    btnContainer.style.textAlign = "center";
    const nextBtn = btnContainer.createEl("button", { text: "Анализировать" });
    nextBtn.style.marginTop = "1.5em";
    nextBtn.style.padding = "8px 24px";
    nextBtn.style.fontSize = "1em";
    nextBtn.style.borderRadius = "6px";
    nextBtn.style.background = "#7be87b";
    nextBtn.style.color = "#222";
    nextBtn.style.border = "none";
    nextBtn.style.cursor = "pointer";
    nextBtn.disabled = true;
    nextBtn.addEventListener("click", async () => {
      const contents = [];
      for (const file of this.selectedFiles) {
        const content = await this.app.vault.read(file);
        contents.push({ name: file.basename, content });
      }
      this.onSelect(contents);
      this.close();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
